{"version":3,"sources":["data/routes.js","components/Templates/Hamburger.js","components/Templates/Header.js","data/contact.js","components/Templates/Nav.js","layouts/Main.js","views/Index.js","App.js","serviceWorker.js","index.js"],"names":["data","path","label","index","Hamburger","useState","open","setOpen","className","id","onClick","right","isOpen","routes","map","l","key","to","Header","filter","link","icon","faGithub","faLinkedinIn","faWordpress","faInstagram","Nav","src","alt","href","window","location","pathname","s","Main","scrollTo","titleTemplate","defaultTitle","this","props","children","fullPage","Component","defaultProps","Index","App","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e899dece.chunk.js","sourcesContent":["const data = [\r\n    {\r\n      path: '/',\r\n      label: 'Disha Singh',\r\n      index: true,\r\n    },\r\n    {\r\n      path: '/about',\r\n      label: 'About',\r\n    },\r\n    {\r\n      path: '/resume',\r\n      label: 'Resume',\r\n    },\r\n    {\r\n      path: '/projects',\r\n      label: 'Projects',\r\n    },\r\n    {\r\n      path: '/contact',\r\n      label: 'Contact',\r\n    },\r\n  ];\r\n  \r\n  export default data;\r\n  ","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Menu from 'react-burger-menu/lib/menus/slide';\r\n\r\nimport routes from '../../data/routes';\r\n\r\nconst Hamburger = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"hamburger-container\">\r\n      <nav className=\"main\" id=\"hambuger-nav\">\r\n        <ul>\r\n          {open ? (\r\n            <li className=\"menu close-menu\">\r\n              <div onClick={() => setOpen(!open)} className=\"menu-hover\">&#10005;</div>\r\n            </li>\r\n          ) : (\r\n            <li className=\"menu open-menu\">\r\n              <div onClick={() => setOpen(!open)} className=\"menu-hover\">&#9776;</div>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </nav>\r\n      <Menu right isOpen={open}>\r\n        <ul className=\"hamburger-ul\">\r\n          {routes.map((l) => (\r\n            <li key={l.label}>\r\n              <Link to={l.path} onClick={() => setOpen(!open)}>\r\n                <h3 className={l.index && 'index-li'}>{l.label}</h3>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hamburger;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Hamburger from './Hamburger';\r\nimport routes from '../../data/routes';\r\n\r\nconst Header = () => (\r\n  <header id=\"header\">\r\n    <h1 className=\"index-link\">\r\n      {routes.filter((l) => l.index).map((l) => (\r\n        <Link key={l.label} to={l.path}>{l.label}</Link>\r\n      ))}\r\n    </h1>\r\n    <nav className=\"links\">\r\n      <ul>\r\n        {routes.filter((l) => !l.index).map((l) => (\r\n          <li key={l.label}>\r\n            <Link to={l.path}>{l.label}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n    <Hamburger />\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import faGithub from '@fortawesome/fontawesome-free-brands/faGithub';\r\nimport faWordpress from '@fortawesome/fontawesome-free-brands/faWordpress';\r\nimport faInstagram from '@fortawesome/fontawesome-free-brands/faInstagram';\r\nimport faLinkedinIn from '@fortawesome/fontawesome-free-brands/faLinkedinIn';\r\n\r\nconst data = [\r\n  {\r\n    link: 'https://github.com/disha00991',\r\n    label: 'Github',\r\n    icon: faGithub,\r\n  },\r\n  {\r\n    link: 'https://www.linkedin.com/in/cslovedisha',\r\n    label: 'LinkedIn',\r\n    icon: faLinkedinIn,\r\n  },\r\n  {\r\n    link: 'https://today5or5never.wordpress.com/',\r\n    label: 'Wordpress',\r\n    icon: faWordpress,\r\n  },\r\n  {\r\n    link: 'https://www.instagram.com/happytrodder/',\r\n    label: 'Instagram',\r\n    icon: faInstagram,\r\n  }\r\n];\r\n\r\nexport default data;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nimport data from '../../data/contact';\r\n\r\nconst Nav = () => (\r\n  <section id=\"sidebar\">\r\n    <section id=\"intro\">\r\n      <Link to=\"/\" className=\"logo\">\r\n        <img src='/images/1.jpg' alt=\"\" />  {/*<img src={`${BASE_PATH}/images/me_icon.jpg`} alt=\"\" /> @TODO add basepath*/}\r\n      </Link>\r\n      <header>\r\n        <h2>Disha Singh</h2>\r\n        <p><a href=\"mailto:disha.singh00991@gmail.com\">disha.singh00991@gmail.com</a></p>\r\n      </header>\r\n    </section>\r\n\r\n    <section className=\"blurb\">\r\n      <h2>About</h2>\r\n      <p>Hi, I&apos;m Disha. I like appreciating people who build things and get inspired.\r\n            I am a proud <a href=\"https://nith.ac.in/\">NIT, Hamirpur, India</a> graduate, and {/* add dance club link @TODO*/}\r\n            the co-founder of 3rd year choreo in <a href=\"#\">Dance Club Rhythmeecs</a>. After college I was\r\n            at <a href=\"https://www.publicissapient.com\">Publicis Sapient</a>, and currently exploring my potential at <a href=\"www.thb.co.in\">THB India</a>.\r\n      </p>\r\n      <ul className=\"actions\">\r\n        <li>{/*window.location.pathname !== `${BASE_PATH}/resume` @TODO*/}\r\n          {window.location.pathname !== `/resume` ? <Link to=\"/resume\" className=\"button\">Learn More</Link> : <Link to=\"/about\" className=\"button\">About Me</Link>}\r\n        </li>\r\n      </ul>\r\n    </section>\r\n\r\n    <section id=\"footer\">\r\n      <ul className=\"icons\">\r\n        {data.map((s) => (\r\n          <li key={s.label}>\r\n            <a href={s.link}>\r\n              <FontAwesomeIcon icon={s.icon} />\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <p className=\"copyright\">&copy; Disha Singh</p>\r\n    </section>\r\n  </section>\r\n);\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport ReactGA from 'react-ga';\r\n\r\nimport Header from '../components/Templates/Header';\r\nimport Nav from '../components/Templates/Nav';\r\n\r\n// if (NODE_ENV === 'production') {\r\n//   ReactGA.initialize(GA_ID);\r\n// }\r\n\r\nclass Main extends Component {\r\n  componentWillMount() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n//   componentDidMount() {\r\n//     if (NODE_ENV === 'production') {\r\n//       ReactGA.set({\r\n//         page: window.location.pathname,\r\n//       });\r\n//       ReactGA.pageview(window.location.pathname);\r\n//     }\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"wrapper\">\r\n        <Helmet titleTemplate=\"%s | Disha Singh\" defaultTitle=\"Disha Singh\" />\r\n        <Header />\r\n        <div id=\"main\">\r\n          {this.props.children}\r\n        </div>\r\n        {!this.props.fullPage && <Nav />}\r\n      </div>);\r\n  }\r\n}\r\n\r\nMain.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n  fullPage: PropTypes.bool,\r\n};\r\n\r\nMain.defaultProps = {\r\n  children: null,\r\n  fullPage: false,\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\n\r\nconst Index = () => (\r\n  <Main>\r\n    <article className=\"post\" id=\"index\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2><Link to=\"/\">About this site</Link></h2>\r\n          <p>A beautiful, responsive, react app written with modern Javascript.</p>\r\n        </div>\r\n      </header>\r\n      <p> Welcome to my website. Please feel free to read more <Link to=\"/about\">about me</Link>,\r\n        or you can check out my {' '}\r\n        <Link to=\"/resume\">resume</Link>, {' '}\r\n        <Link to=\"/projects\">projects</Link>, {' '}\r\n        or <Link to=\"/contact\">contact</Link> me.\r\n      </p>\r\n      <p> Source available <a href=\"#\">here</a>.</p> {/*@TODO: Add website link */}\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Index;\r\n","// import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router, Switch, Route,\r\n} from 'react-router-dom';\r\n\r\n// Featured\r\nimport Index from './views/Index';\r\n\r\n// All of our CSS\r\nimport './static/css/main.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Index} />\r\n          {/* <Route path=\"/about\" component={About} />\r\n      <Route path=\"/projects\" component={Projects} />\r\n      <Route path=\"/stats\" component={Stats} />\r\n      <Route path=\"/contact\" component={Contact} />\r\n      <Route path=\"/resume\" component={Resume} />\r\n      {/* Only useful in development mode */}\r\n          {/*<Route component={NotFound} status={404} /> */}\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// import About from './views/About';\r\n// import Projects from './views/Projects';\r\n// import Resume from './views/Resume';\r\n// import Stats from './views/Stats';\r\n// import Contact from './views/Contact';\r\n\r\n// import NotFound from './views/NotFound';\r\n\r\n// All of our CSS\r\n// import './static/css/main.scss';\r\n\r\n// ReactDOM.render(\r\n//   <Router basename={BASE_PATH}>\r\n//     <Switch>\r\n//       <Route exact path=\"/\" component={Index} />\r\n//       {/* <Route path=\"/about\" component={About} />\r\n//       <Route path=\"/projects\" component={Projects} />\r\n//       <Route path=\"/stats\" component={Stats} />\r\n//       <Route path=\"/contact\" component={Contact} />\r\n//       <Route path=\"/resume\" component={Resume} />\r\n//       {/* Only useful in development mode */}\r\n//       {/*<Route component={NotFound} status={404} /> */}\r\n//     </Switch>\r\n//   </Router>,\r\n//   document.getElementById('root'),\r\n// );\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}